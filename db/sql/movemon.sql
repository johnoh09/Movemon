-- ENUM (필요시)
CREATE TYPE goal_status AS ENUM ('success','fail','progress');
CREATE TYPE gender AS ENUM ('M','F','N');  -- 필요시 확장

-- users
CREATE TABLE users (
  id          bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email       text    NOT NULL UNIQUE,
  nickname    text    NOT NULL,
  password    text    NOT NULL,                  -- 해시 저장 전제
  sex         gender,                            -- 또는 char(1) + CHECK(sex IN ('M','F','N'))
  age         int CHECK (age BETWEEN 0 AND 120),
  created_at  timestamptz NOT NULL DEFAULT now(),
  updated_at  timestamptz NOT NULL DEFAULT now()
);

-- characters
CREATE TABLE characters (
  id            bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  age           int    NOT NULL CHECK (age BETWEEN 0 AND 120),
  sex           gender NOT NULL,
  character_type text  NOT NULL,
  img_url       text   NOT NULL,
  created_at    timestamptz NOT NULL DEFAULT now(),
  updated_at    timestamptz NOT NULL DEFAULT now()
);

-- sports
CREATE TABLE sports (
  id          bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name        text NOT NULL,
  created_at  timestamptz NOT NULL DEFAULT now(),
  updated_at  timestamptz NOT NULL DEFAULT now()
);

-- goals
CREATE TABLE goals (
  id         bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  contents   text NOT NULL,
  status     goal_status NOT NULL DEFAULT 'progress',  -- success/fail/progress
  user_id    bigint NOT NULL REFERENCES users(id) ON DELETE CASCADE
);

-- user_characters (조인 테이블)
CREATE TABLE user_characters (
  user_id      bigint NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  character_id bigint NOT NULL REFERENCES characters(id) ON DELETE CASCADE,
  created_at   timestamptz NOT NULL DEFAULT now(),
  updated_at   timestamptz NOT NULL DEFAULT now(),
  PRIMARY KEY (user_id, character_id)              -- 중복 방지
);

-- user_logs (신체 로그)
CREATE TABLE user_logs (
  id         bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id    bigint NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  weight_kg  numeric(5,2) NOT NULL CHECK (weight_kg > 0),
  height_cm  numeric(5,2) NOT NULL CHECK (height_cm > 0),
  created_at timestamptz   NOT NULL DEFAULT now()
);

-- workouts
CREATE TABLE workouts (
  id              bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id         bigint NOT NULL REFERENCES users(id)   ON DELETE CASCADE,
  sports_id       bigint NOT NULL REFERENCES sports(id)  ON DELETE RESTRICT,
  duration_sec    int    NOT NULL CHECK (duration_sec > 0),
  workout_at      timestamptz NOT NULL,
  created_at      timestamptz NOT NULL DEFAULT now(),
  updated_at      timestamptz NOT NULL DEFAULT now()
);

-- FK 인덱스 (실행 계획 최적화)
CREATE INDEX idx_goals_user_id           ON goals(user_id);
CREATE INDEX idx_user_characters_uid     ON user_characters(user_id);
CREATE INDEX idx_user_characters_cid     ON user_characters(character_id);
CREATE INDEX idx_user_logs_user_id       ON user_logs(user_id);
CREATE INDEX idx_workouts_user_id        ON workouts(user_id);
CREATE INDEX idx_workouts_sports_id      ON workouts(sports_id);
CREATE INDEX idx_workouts_workout_at     ON workouts(workout_at);

-- updated_at 자동 갱신 트리거 (선택)
CREATE OR REPLACE FUNCTION set_updated_at()
RETURNS trigger AS $$
BEGIN
  NEW.updated_at := now();
  RETURN NEW;
END; $$ LANGUAGE plpgsql;

CREATE TRIGGER tg_users_updated    BEFORE UPDATE ON users            FOR EACH ROW EXECUTE FUNCTION set_updated_at();
CREATE TRIGGER tg_char_updated     BEFORE UPDATE ON characters       FOR EACH ROW EXECUTE FUNCTION set_updated_at();
CREATE TRIGGER tg_sports_updated   BEFORE UPDATE ON sports           FOR EACH ROW EXECUTE FUNCTION set_updated_at();
CREATE TRIGGER tg_uc_updated       BEFORE UPDATE ON user_characters  FOR EACH ROW EXECUTE FUNCTION set_updated_at();
CREATE TRIGGER tg_workouts_updated BEFORE UPDATE ON workouts         FOR EACH ROW EXECUTE FUNCTION set_updated_at();